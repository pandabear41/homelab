global:
  image:
    tag: v2.9.3
argo-cd:
  server:
    extraArgs:
      - --insecure
    config:
      statusbadge.enabled: 'true'
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs      
      resource.exclusions: |
        - apiGroups:
          - "*"
          kinds:
          - "PipelineRun"
          - "TaskRun"
          clusters:
          - "*"
        - apiGroups:
          - cilium.io
          kinds:
          - CiliumIdentity
          clusters:
          - "*"
      # lets not override CRD webhook caBundle
      resource.customizations.ignoreDifferences.apiextensions.k8s.io_CustomResourceDefinition: |
        jqPathExpressions:
        - '.spec.conversion.webhook.clientConfig.caBundle'
      # ignore external-secrets modifying spec
      resource.customizations.ignoreDifferences.external-secrets.io_ExternalSecret: |
        jqPathExpressions:
        - '.spec.data[]?.remoteRef.conversionStrategy'
        - '.spec.data[]?.remoteRef.decodingStrategy'
        - '.spec.data[]?.remoteRef.metadataPolicy'
        - '.spec.dataFrom[]?.extract.conversionStrategy'
        - '.spec.dataFrom[]?.extract.decodingStrategy'
        - '.spec.dataFrom[]?.extract.metadataPolicy'
      # ignore kind/version injection in stateful set volume claims
      resource.customizations.ignoreDifferences.apps_StatefulSet: |
        jqPathExpressions:
        - '.spec.volumeClaimTemplates[]?.apiVersion'
        - '.spec.volumeClaimTemplates[]?.kind'
      # a lot of things produce cluster roles and dynamically set rules
      # knative, triggermesh, ?
      resource.customizations.ignoreDifferences.rbac.authorization.k8s.io_ClusterRole: |
        jqPathExpressions:
        - '.rules'
      resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
        jqPathExpressions:
        - '.webhooks[]?.failurePolicy'
        - '.webhooks[]?.rules[]?.resources'
    ingress:
      enabled: true
      ingressClassName: nginx
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
      hosts:
        - &host argocd.pl4.me
      tls:
        - secretName: argocd-tls-certificate
          hosts:
            - *host
    metrics: 
      enabled: true
      serviceMonitor:
        enabled: true
  dex:
    enabled: false
  controller:
    metrics: 
      enabled: true
      serviceMonitor:
        enabled: true
  repoServer:
    metrics: 
      enabled: true
      serviceMonitor:
        enabled: true
  redis:
    metrics: 
      enabled: true
      serviceMonitor:
        enabled: true
